#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
run_tests.py - Ejecutor de todas las pruebas SIN Fusion 360
Ejecuta este archivo para verificar que todo funciona correctamente
"""

import sys
import os

# Agregar el directorio al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

print("="*70)
print("SUITE DE PRUEBAS - HARMONIC DRIVE GENERATOR")
print("="*70)
print("\nEste script ejecuta todas las pruebas SIN necesidad de Fusion 360")
print("-"*70)

# Test 1: Importar m√≥dulos
print("\n[1/4] Verificando imports...")
try:
    from core.calculations import HarmonicDriveParams, HarmonicDriveCalculator
    from geometry.involute_profile import InvoluteGearProfile, HarmonicDriveInvoluteProfile
    print("‚úÖ Todos los m√≥dulos importados correctamente")
except Exception as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    sys.exit(1)

# Test 2: Ejecutar tests de c√°lculos
print("\n[2/4] Ejecutando tests de c√°lculos matem√°ticos...")
print("-"*50)
try:
    from tests.test_calculations import run_all_tests
    success = run_all_tests()
    if not success:
        print("‚ö†Ô∏è Algunos tests de c√°lculos fallaron")
except Exception as e:
    print(f"‚ùå Error en tests de c√°lculos: {e}")

# Test 3: Probar perfil involuta
print("\n[3/4] Probando generador de perfil involuta...")
print("-"*50)
try:
    from geometry.involute_profile import test_involute_profile
    result = test_involute_profile()
    if result:
        print("‚úÖ Perfil involuta funciona correctamente")
    else:
        print("‚ö†Ô∏è Problemas con el perfil involuta")
except Exception as e:
    print(f"‚ùå Error en perfil involuta: {e}")

# Test 4: Ejemplo completo de Harmonic Drive
print("\n[4/4] Ejemplo completo de dise√±o de Harmonic Drive...")
print("-"*50)
try:
    # Crear par√°metros para un HD 80:1
    print("\nDise√±ando Harmonic Drive 80:1...")
    
    params = HarmonicDriveParams(
        teeth_cs=160,
        module=0.5,
        pressure_angle=30,
        material='plastic'  # Para que pase la validaci√≥n de strain
    )
    
    # Crear calculadora
    calc = HarmonicDriveCalculator(params)
    
    # Obtener resumen
    summary = calc.get_full_summary()
    
    print(f"\nüìä RESUMEN DEL DISE√ëO:")
    print(f"  Reducci√≥n: {params.ratio}:1")
    print(f"  Dientes CS/FS: {params.teeth_cs}/{params.teeth_fs}")
    print(f"  M√≥dulo: {params.module} mm")
    print(f"  Excentricidad: {params.eccentricity:.3f} mm")
    
    print(f"\nüìê DIMENSIONES:")
    cs_geo = summary['circular_spline']
    fs_geo = summary['flex_spline']
    wg_geo = summary['wave_generator']
    
    print(f"  Circular Spline:")
    print(f"    - Di√°metro primitivo: {cs_geo['pitch_diameter']:.2f} mm")
    print(f"    - Di√°metro exterior: {cs_geo['outer_diameter']:.2f} mm")
    
    print(f"  Flex Spline:")
    print(f"    - Di√°metro primitivo: {fs_geo['pitch_diameter']:.2f} mm")
    print(f"    - Espesor pared: {fs_geo['wall_thickness']:.2f} mm")
    print(f"    - Longitud copa: {fs_geo['cup_length']:.2f} mm")
    
    print(f"  Wave Generator:")
    print(f"    - Elipse mayor: {wg_geo['major_diameter']:.2f} mm")
    print(f"    - Elipse menor: {wg_geo['minor_diameter']:.2f} mm")
    
    print(f"\n‚úÖ VALIDACI√ìN:")
    analysis = summary['analysis']
    print(f"  Deformaci√≥n: {analysis['strain']['strain_percent']:.2f}% (m√°x: {analysis['strain']['max_strain_percent']:.1f}%)")
    print(f"  Relaci√≥n contacto: {analysis['contact_ratio']:.2f}")
    print(f"  Juego nominal: {analysis['backlash']['tangential_nominal']:.3f} mm")
    print(f"  Estado: {'‚úÖ V√ÅLIDO' if analysis['is_valid'] else '‚ùå INV√ÅLIDO'}")
    
    # Crear perfiles involutivos
    print(f"\nüîß GENERANDO PERFILES INVOLUTIVOS:")
    hd_profile = HarmonicDriveInvoluteProfile(params)
    
    # Validar engrane
    mesh_validation = hd_profile.validate_meshing()
    print(f"  CS v√°lido: {'‚úÖ' if mesh_validation['cs_valid'] else '‚ùå'}")
    print(f"  FS v√°lido: {'‚úÖ' if mesh_validation['fs_valid'] else '‚ùå'}")
    print(f"  Engrane v√°lido: {'‚úÖ' if mesh_validation['mesh_valid'] else '‚ùå'}")
    
    if mesh_validation['errors']:
        print("  Errores:")
        for error in mesh_validation['errors']:
            print(f"    - {error}")
    
    if mesh_validation['warnings']:
        print("  Advertencias:")
        for warning in mesh_validation['warnings']:
            print(f"    - {warning}")
    
    # Generar algunos puntos de ejemplo
    cs_teeth = hd_profile.get_cs_profile()
    fs_teeth = hd_profile.get_fs_profile()
    
    print(f"\nüìä GEOMETR√çA GENERADA:")
    print(f"  Dientes CS generados: {len(cs_teeth)}")
    print(f"  Dientes FS generados: {len(fs_teeth)}")
    
    if cs_teeth and cs_teeth[0]:
        print(f"  Puntos por diente: {len(cs_teeth[0])}")
        print(f"  Primeros 3 puntos del primer diente CS:")
        for i, (x, y) in enumerate(cs_teeth[0][:3]):
            print(f"    {i}: ({x:.3f}, {y:.3f})")
    
    print("\n‚úÖ Ejemplo completo ejecutado correctamente")
    
except Exception as e:
    print(f"‚ùå Error en ejemplo completo: {e}")
    import traceback
    traceback.print_exc()

# Resumen final
print("\n" + "="*70)
print("RESUMEN FINAL")
print("="*70)
print("\n‚úÖ Sistema listo para usar")
print("\nüìù PR√ìXIMOS PASOS:")
print("  1. Los c√°lculos matem√°ticos est√°n funcionando")
print("  2. El perfil involuta est√° implementado")
print("  3. Ahora puedes usar estos m√≥dulos en Fusion 360")
print("  4. Ejecuta HDriveGenerator.py en Fusion 360 para generar el modelo 3D")
print("\nüí° NOTA: Este script verifica la l√≥gica SIN Fusion 360")
print("         Para generar el modelo 3D, usa Fusion 360")
print("\n" + "="*70)